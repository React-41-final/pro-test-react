{"version":3,"sources":["components/diagram/Diagram.module.scss","components/pages/results/Results.module.scss","components/diagram/Diagram.js","img/catResultPage.png","components/pages/results/Results.js","redux/operations/resultsOperations.js"],"names":["module","exports","Diagram","state","percent","this","props","results","result","slice","setState","className","styles","container","chart","chartType","loader","data","Number","Math","round","options","pieStartAngle","pieSliceText","slices","0","color","1","chartArea","left","top","width","height","rootProps","answers","textAnswers","textAnswersNumber","Component","connect","resultsOfTest","Results","tests","length","resultsOperation","prevState","prevProps","resultTitle","resultName","catImages","src","alt","mainMessage","secondaryMessage","to","routes","mainPage","buttonText","button","type","mapDispatchToProps","typeOfTest","dispatch","a","resultsRequest","postTechResults","resultsSuccess","resultsError","postTheoryResults","test"],"mappings":"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","file":"static/js/5.db47ea58.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Diagram_container__2tuYv\",\"chart\":\"Diagram_chart__32rsK\",\"answers\":\"Diagram_answers__2P4on\",\"textAnswers\":\"Diagram_textAnswers__3C3kI\",\"textAnswersNumber\":\"Diagram_textAnswersNumber__1wruQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"results\":\"Results_results__1vzZS\",\"resultTitle\":\"Results_resultTitle__2f5IH\",\"resultName\":\"Results_resultName__1ukAa\",\"catImages\":\"Results_catImages__3PZfF\",\"mainMessage\":\"Results_mainMessage__2feFm\",\"secondaryMessage\":\"Results_secondaryMessage__3i9ry\",\"button\":\"Results_button__1YHEd\",\"buttonText\":\"Results_buttonText__1BH7z\"};","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { Chart } from \"react-google-charts\";\r\nimport styles from \"./Diagram.module.scss\";\r\n\r\nclass Diagram extends Component {\r\n  state = {\r\n    percent: null,\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (this.props.results.result) {\r\n      const percent = this.props.results.result.slice(0, -1);\r\n      this.setState( { ...this.state.percent, percent });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (this.state.percent !== null) ? (\r\n      <div className={styles.container}>\r\n        <Chart\r\n          className={styles.chart}\r\n          chartType=\"PieChart\"\r\n          loader={<div>Loading Chart</div>}\r\n          data={[\r\n            [\"Task\", \"Hours per Day\"],\r\n            [`${this.state.percent}%  Correct `, Number(Math.round(this.state.percent/100*12))], \r\n            [`${100-this.state.percent}%  Incorrect `, 12-Number(Math.round(this.state.percent/100*12))], \r\n          ]}\r\n          options={{\r\n            pieStartAngle: 100,\r\n            pieSliceText: \"none\",\r\n            slices: {\r\n              0: { color: \"#FF6B01\" },\r\n              1: { color: \"#D7D7D7\" },\r\n            },\r\n            chartArea: { left: 100, top: 10, width: \"90%\", height: \"90%\" },\r\n          }}\r\n          rootProps={{ \"data-testid\": \"1\" }}\r\n        />\r\n        <div className={styles.answers}>\r\n          <p className={styles.textAnswers}>\r\n            Correct answers -{\" \"}\r\n            <span className={styles.textAnswersNumber}>\r\n              {Number(Math.round((this.state.percent / 100) * 12))}\r\n            </span>\r\n          </p>\r\n          <p className={styles.textAnswers}>\r\n            Total questions -{\" \"}\r\n            <span className={styles.textAnswersNumber}>12</span>\r\n          </p>\r\n        </div>\r\n      </div>) : <></>\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  results: state.resultsOfTest.results,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Diagram);\r\n","export default __webpack_public_path__ + \"static/media/catResultPage.aa40c4d6.png\";","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { NavLink, Redirect } from \"react-router-dom\";\r\n\r\nimport routes from \"../../../routers/routers\";\r\nimport Diagram from \"../../diagram/Diagram\";\r\nimport catImages from \"../../../img/catResultPage.png\";\r\nimport { resultsOperation } from \"../../../redux/operations/resultsOperations\";\r\n\r\nimport styles from \"./Results.module.scss\";\r\n\r\nclass Results extends Component {\r\n  state = {};\r\n\r\n  componentDidMount() {\r\n    if (this.props.tests.length === 12) {\r\n      this.props.resultsOperation(\r\n        this.props.tests,\r\n        \"Переменная что отвечает за тим запроса\"\r\n      );\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevState, prevProps) {\r\n    const results = this.props.results;\r\n\r\n    if (results !== prevProps.results) {\r\n      this.setState({ results });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return !this.state.results ? (\r\n      <Redirect to={routes.mainPage} />\r\n    ) : (\r\n      <div className={styles.results}>\r\n        <h2 className={styles.resultTitle}>Results</h2>\r\n        <p className={styles.resultName}>\r\n          [ Testing theory_] ORR [QA technical training]\r\n        </p>\r\n        <Diagram />\r\n        <img className={styles.catImages} src={catImages} alt=\"cat\"></img>\r\n        <p className={styles.mainMessage}>{this.state.results.mainMessage}</p>\r\n        <p className={styles.secondaryMessage}>\r\n          {this.state.results.secondaryMessage}\r\n        </p>\r\n        <NavLink to={routes.mainPage} className={styles.buttonText}>\r\n          <button className={styles.button} type=\"button\">\r\n            Try again\r\n          </button>\r\n        </NavLink>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  tests: state.tests.test, // Масив ответов из сторе\r\n  results: state.resultsOfTest.results,\r\n  // typeOfTests: state(переменная что за это отвечает),//для определения какой запрос делать\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  resultsOperation: resultsOperation,\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Results);\r\n","import {\r\n  resultsRequest,\r\n  resultsSuccess,\r\n  resultsError,\r\n} from \"../actions/resultsAction\";\r\nimport { postTechResults, postTheoryResults } from \"../../servises/reqToApi\";\r\n\r\nconst resultsOperation = (tests, typeOfTest) => async (dispatch) => {\r\n  dispatch(resultsRequest());\r\n\r\n  if (typeOfTest) { //Указать тип теста который проходили, для отправки запроса на бекенд\r\n    try {\r\n      const results = await postTechResults(tests);\r\n      dispatch(resultsSuccess(results));\r\n    } catch (error) {\r\n      dispatch(resultsError(error));\r\n    }\r\n  } else {\r\n    try {\r\n      const results = await postTheoryResults(tests);\r\n      dispatch(resultsSuccess(results));\r\n    } catch (error) {\r\n      dispatch(resultsError(error));\r\n    }\r\n  } //Дописать условие на тип теста\r\n}; //нужно добавить операцию для \"postTheoryResults\"\r\n\r\nexport { resultsOperation };\r\n"],"sourceRoot":""}