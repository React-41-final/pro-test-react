{"version":3,"sources":["redux/selectors/testSelector.js","components/diagram/Diagram.module.scss","components/pages/results/Results.module.scss","components/diagram/Diagram.js","img/catResultPage.png","redux/selectors/resultsSelector.js","components/pages/results/Results.js","redux/operations/resultsOperations.js"],"names":["getTestData","state","tests","test","getTestType","type","module","exports","Diagram","percent","prevState","prevProps","this","props","slice","setState","className","styles","container","answers","textAnswers","textAnswersNumber","chart","chartType","loader","data","Number","Math","round","options","pieStartAngle","pieSliceText","slices","0","color","1","chartArea","left","top","width","height","backgroundColor","rootProps","Component","getTestAnswers","getResultsOfTest","resultsOfTest","results","Results","testAnswers","typeOfTests","resultsOperation","length","to","routes","mainPage","Loader","resultTitle","resultName","result","catImages","src","alt","mainMessage","secondaryMessage","buttonText","button","mapDispatchToProps","typeOfTest","dispatch","a","resultsRequest","postTechResults","resultsSuccess","resultsError","postTheoryResults","connect"],"mappings":"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","file":"static/js/6.822aebab.chunk.js","sourcesContent":["const getTestData = (state) => {\r\n  return state.tests.test;\r\n};\r\n\r\nconst getTestType = (state) => {\r\n  return state.tests.type;\r\n};\r\n\r\nexport { getTestData, getTestType };\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Diagram_container__2tuYv\",\"chart\":\"Diagram_chart__32rsK\",\"answers\":\"Diagram_answers__2P4on\",\"textAnswers\":\"Diagram_textAnswers__3C3kI\",\"textAnswersNumber\":\"Diagram_textAnswersNumber__1wruQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"results\":\"Results_results__1vzZS\",\"resultTitle\":\"Results_resultTitle__2f5IH\",\"resultName\":\"Results_resultName__1ukAa\",\"catImages\":\"Results_catImages__3PZfF\",\"mainMessage\":\"Results_mainMessage__2feFm\",\"secondaryMessage\":\"Results_secondaryMessage__3i9ry\",\"button\":\"Results_button__1YHEd\",\"buttonText\":\"Results_buttonText__1BH7z\"};","import React, { Component } from \"react\";\r\n\r\nimport { Chart } from \"react-google-charts\";\r\nimport styles from \"./Diagram.module.scss\";\r\n\r\nclass Diagram extends Component {\r\n  state = { percent: null };\r\n\r\n  componentDidUpdate(prevState, prevProps) {\r\n    const percent = this.props.percent.slice(0, -1);\r\n\r\n    if (percent !== prevProps.percent) {\r\n      this.setState({ percent });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return  this.state.percent === \"0%\" ? (\r\n      <div className={styles.container}>\r\n        <div className={styles.answers}>\r\n          <p className={styles.textAnswers}>\r\n            Correct answers -{\" \"}\r\n            <span className={styles.textAnswersNumber}>0</span>\r\n          </p>\r\n          <p className={styles.textAnswers}>\r\n            Total questions -{\" \"}\r\n            <span className={styles.textAnswersNumber}>12</span>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    ) : (\r\n      <div className={styles.container}>\r\n        <Chart\r\n          className={styles.chart}\r\n          chartType=\"PieChart\"\r\n          loader={<div>Loading Chart</div>}\r\n          data={[\r\n            [\"Task\", \"Hours per Day\"],\r\n            [\r\n              `${this.state.percent}%  Correct `,\r\n              Number(Math.round((this.state.percent / 100) * 12)),\r\n            ],\r\n            [\r\n              `${100 - this.state.percent}%  Incorrect `,\r\n              12 - Number(Math.round((this.state.percent / 100) * 12)),\r\n            ],\r\n          ]}\r\n          options={{\r\n            pieStartAngle: 100,\r\n            pieSliceText: \"none\",\r\n            slices: {\r\n              0: { color: \"#FF6B01\" },\r\n              1: { color: \"#D7D7D7\" },\r\n            },\r\n            chartArea: { left: 100, top: 10, width: \"90%\", height: \"90%\" },\r\n            backgroundColor: \"#f5f6fb\",\r\n          }}\r\n          rootProps={{ \"data-testid\": \"1\" }}\r\n        />\r\n        <div className={styles.answers}>\r\n          <p className={styles.textAnswers}>\r\n            Correct answers -{\" \"}\r\n            <span className={styles.textAnswersNumber}>\r\n              {Number(Math.round((this.state.percent / 100) * 12))}\r\n            </span>\r\n          </p>\r\n          <p className={styles.textAnswers}>\r\n            Total questions -{\" \"}\r\n            <span className={styles.textAnswersNumber}>12</span>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// const mapStateToProps = (state) => ({\r\n//   percent: state.resultsOfTest.results.result,\r\n// });\r\n\r\n// export default connect(mapStateToProps)(Diagram);\r\nexport default Diagram;\r\n","export default __webpack_public_path__ + \"static/media/catResultPage.aa40c4d6.png\";","const getTestAnswers = (state) => {\r\n  return state.tests.answers;\r\n};\r\n\r\nconst getResultsOfTest = (state) => {\r\n  return state.resultsOfTest.results;\r\n};\r\n\r\nexport { getTestAnswers, getResultsOfTest };\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { NavLink, Redirect } from \"react-router-dom\";\r\n\r\nimport routes from \"../../../routers/routers\";\r\nimport Diagram from \"../../diagram/Diagram\";\r\nimport catImages from \"../../../img/catResultPage.png\";\r\nimport { getTestType } from \"../../../redux/selectors/testSelector\";\r\nimport { resultsOperation } from \"../../../redux/operations/resultsOperations\";\r\nimport { getTestAnswers, getResultsOfTest } from \"../../../redux/selectors/resultsSelector\"\r\n\r\nimport styles from \"./Results.module.scss\";\r\nimport Loader from \"../../loader/Loader\";\r\n\r\nclass Results extends Component {\r\n  state = {};\r\n\r\n  componentDidMount() {\r\n    const { testAnswers, typeOfTests, resultsOperation } = this.props;\r\n\r\n    if (testAnswers && testAnswers.answers.length === 12) {\r\n      resultsOperation(testAnswers, typeOfTests);\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevState, prevProps) {\r\n    const results = this.props.results;\r\n\r\n    if (results !== prevProps.results) {\r\n      this.setState({ results });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { testAnswers, results } = this.props;\r\n\r\n    return testAnswers === null || testAnswers.answers.length < 12 ? (\r\n      <Redirect to={routes.mainPage} />\r\n    ) : results.answers ? (\r\n      <Loader />\r\n    ) : (\r\n      <div className={styles.results}>\r\n        <h2 className={styles.resultTitle}>Results</h2>\r\n        <p className={styles.resultName}>\r\n          {this.props.typeOfTests === \"technical\"\r\n            ? `[ Testing technical_ ]`\r\n            : `[ Testing theory_ ]`}\r\n        </p>\r\n        <Diagram percent={results.result} />\r\n        <img className={styles.catImages} src={catImages} alt=\"cat\"></img>\r\n        <p className={styles.mainMessage}>{results.mainMessage}</p>\r\n        <p className={styles.secondaryMessage}>{results.secondaryMessage}</p>\r\n        <NavLink to={routes.test} className={styles.buttonText}>\r\n          <button className={styles.button} type=\"button\">\r\n            Try again\r\n          </button>\r\n        </NavLink>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  testAnswers: getTestAnswers(state), // Масив ответов из сторе\r\n  results: getResultsOfTest(state),\r\n  typeOfTests: getTestType(state), //для определения какой запрос делать\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  resultsOperation: resultsOperation,\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Results);\r\n","import {\r\n  resultsRequest,\r\n  resultsSuccess,\r\n  resultsError,\r\n} from \"../actions/resultsAction\";\r\nimport { postTechResults, postTheoryResults } from \"../../servises/reqToApi\";\r\n\r\nconst resultsOperation = (tests, typeOfTest) => async (dispatch) => {\r\n  dispatch(resultsRequest());\r\n\r\n  if (typeOfTest === \"technical\") {\r\n    try {\r\n      const results = await postTechResults(tests);\r\n      dispatch(resultsSuccess(results));\r\n    } catch (error) {\r\n      dispatch(resultsError(error));\r\n    }\r\n  } else {\r\n    try {\r\n      const results = await postTheoryResults(tests);\r\n      dispatch(resultsSuccess(results));\r\n    } catch (error) {\r\n      dispatch(resultsError(error));\r\n    }\r\n  } \r\n};\r\n\r\nexport { resultsOperation };\r\n"],"sourceRoot":""}